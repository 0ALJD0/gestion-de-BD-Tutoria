--PROCEDIMIENTOS ALMACENADOS PARA CADA ENTIDAD DE KINDER DB

-- Procedimientos CRUD para la entidad TUTORES_NINIOS_RELATION

-- Procedimiento para Insertar (CREATE) en la entidad TUTORES_NINIOS_RELATION
CREATE OR REPLACE PROCEDURE insert_tutores_ninios_relation(
    p_ID_NINIO IN TUTORES_NINIOS_RELATION.ID_NINIO%TYPE,
    p_ID_TUTOR IN TUTORES_NINIOS_RELATION.ID_TUTOR%TYPE
) IS
BEGIN
    INSERT INTO TUTORES_NINIOS_RELATION (ID_NINIO, ID_TUTOR)
    VALUES (p_ID_NINIO, p_ID_TUTOR);
    COMMIT;
END;
/

-- Procedimiento para Eliminar (DELETE) en la entidad TUTORES_NINIOS_RELATION
CREATE OR REPLACE PROCEDURE delete_tutores_ninios_relation(
    p_ID_NINIO IN TUTORES_NINIOS_RELATION.ID_NINIO%TYPE,
    p_ID_TUTOR IN TUTORES_NINIOS_RELATION.ID_TUTOR%TYPE
) IS
BEGIN
    DELETE FROM TUTORES_NINIOS_RELATION
    WHERE ID_NINIO = p_ID_NINIO AND ID_TUTOR = p_ID_TUTOR;
    COMMIT;
END;
/

-- Procedimiento para Actualizar (UPDATE) en la entidad TUTORES_NINIOS_RELATION
CREATE OR REPLACE PROCEDURE update_tutores_ninios_relation(
    p_ID_NINIO IN TUTORES_NINIOS_RELATION.ID_NINIO%TYPE,
    p_ID_TUTOR IN TUTORES_NINIOS_RELATION.ID_TUTOR%TYPE,
    p_NEW_ID_NINIO IN TUTORES_NINIOS_RELATION.ID_NINIO%TYPE,
    p_NEW_ID_TUTOR IN TUTORES_NINIOS_RELATION.ID_TUTOR%TYPE
) IS
BEGIN
    UPDATE TUTORES_NINIOS_RELATION
    SET ID_NINIO = p_NEW_ID_NINIO, ID_TUTOR = p_NEW_ID_TUTOR
    WHERE ID_NINIO = p_ID_NINIO AND ID_TUTOR = p_ID_TUTOR;
    COMMIT;
END;
/

-- Procedimiento para Seleccionar (SELECT) de la entidad TUTORES_NINIOS_RELATION
CREATE OR REPLACE PROCEDURE select_tutores_ninios_relation(
    p_ID_NINIO IN TUTORES_NINIOS_RELATION.ID_NINIO%TYPE,
    p_ID_TUTOR IN TUTORES_NINIOS_RELATION.ID_TUTOR%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT *
    FROM TUTORES_NINIOS_RELATION
    WHERE ID_NINIO = p_ID_NINIO AND ID_TUTOR = p_ID_TUTOR;
END;
/

-- Fin de los Procedimientos CRUD para la entidad TUTORES_NINIOS_RELATION


-- Procedimientos CRUD para la entidad TUTOR

-- Procedimiento para Insertar (CREATE) en la entidad TUTOR
CREATE OR REPLACE PROCEDURE insert_tutor(
    p_ID_NACIONALIDAD IN TUTOR.ID_NACIONALIDAD%TYPE,
    p_ID_GENERO IN TUTOR.ID_GENERO%TYPE,
    p_ID_PARENTESCO IN TUTOR.ID_PARENTESCO%TYPE,
    p_NOMBRE_TUTOR IN TUTOR.NOMBRE_TUTOR%TYPE,
    p_APELLIDO_TUTOR IN TUTOR.APELLIDO_TUTOR%TYPE,
    p_CI_TUTOR IN TUTOR.CI_TUTOR%TYPE,
    p_DIRECCION_TUTOR IN TUTOR.DIRECCION_TUTOR%TYPE,
    p_TELEFONO_TUTOR IN TUTOR.TELEFONO_TUTOR%TYPE,
    p_DOMICILIO_TUTOR IN TUTOR.DOMICILIO_TUTOR%TYPE,
    p_MOTIVO IN TUTOR.MOTIVO%TYPE
) IS
BEGIN
    INSERT INTO TUTOR (ID_NACIONALIDAD, ID_GENERO, ID_PARENTESCO, NOMBRE_TUTOR, APELLIDO_TUTOR, CI_TUTOR, DIRECCION_TUTOR, TELEFONO_TUTOR, DOMICILIO_TUTOR, MOTIVO)
    VALUES (p_ID_NACIONALIDAD, p_ID_GENERO, p_ID_PARENTESCO, p_NOMBRE_TUTOR, p_APELLIDO_TUTOR, p_CI_TUTOR, p_DIRECCION_TUTOR, p_TELEFONO_TUTOR, p_DOMICILIO_TUTOR, p_MOTIVO);
    COMMIT;
END;
/

-- Procedimiento para Actualizar (UPDATE) en la entidad TUTOR
CREATE OR REPLACE PROCEDURE update_tutor(
    p_ID_TUTOR IN TUTOR.ID_TUTOR%TYPE,
    p_ID_NACIONALIDAD IN TUTOR.ID_NACIONALIDAD%TYPE,
    p_ID_GENERO IN TUTOR.ID_GENERO%TYPE,
    p_ID_PARENTESCO IN TUTOR.ID_PARENTESCO%TYPE,
    p_NOMBRE_TUTOR IN TUTOR.NOMBRE_TUTOR%TYPE,
    p_APELLIDO_TUTOR IN TUTOR.APELLIDO_TUTOR%TYPE,
    p_CI_TUTOR IN TUTOR.CI_TUTOR%TYPE,
    p_DIRECCION_TUTOR IN TUTOR.DIRECCION_TUTOR%TYPE,
    p_TELEFONO_TUTOR IN TUTOR.TELEFONO_TUTOR%TYPE,
    p_DOMICILIO_TUTOR IN TUTOR.DOMICILIO_TUTOR%TYPE,
    p_MOTIVO IN TUTOR.MOTIVO%TYPE
) IS
BEGIN
    UPDATE TUTOR
    SET ID_NACIONALIDAD = p_ID_NACIONALIDAD,
        ID_GENERO = p_ID_GENERO,
        ID_PARENTESCO = p_ID_PARENTESCO,
        NOMBRE_TUTOR = p_NOMBRE_TUTOR,
        APELLIDO_TUTOR = p_APELLIDO_TUTOR,
        CI_TUTOR = p_CI_TUTOR,
        DIRECCION_TUTOR = p_DIRECCION_TUTOR,
        TELEFONO_TUTOR = p_TELEFONO_TUTOR,
        DOMICILIO_TUTOR = p_DOMICILIO_TUTOR,
        MOTIVO = p_MOTIVO
    WHERE ID_TUTOR = p_ID_TUTOR;
    COMMIT;
END;
/

-- Procedimiento para Eliminar (DELETE) en la entidad TUTOR
CREATE OR REPLACE PROCEDURE delete_tutor(
    p_ID_TUTOR IN TUTOR.ID_TUTOR%TYPE
) IS
BEGIN
    DELETE FROM TUTOR
    WHERE ID_TUTOR = p_ID_TUTOR;
    COMMIT;
END;
/

-- Procedimiento para Seleccionar (SELECT) de la entidad TUTOR
CREATE OR REPLACE PROCEDURE select_tutor(
    p_ID_TUTOR IN TUTOR.ID_TUTOR%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT *
    FROM TUTOR
    WHERE ID_TUTOR = p_ID_TUTOR;
END;
/

-- Fin de los Procedimientos CRUD para la entidad TUTOR


-- Procedimientos CRUD para la entidad TIPO_RENDIMIENTO

-- Procedimiento para Insertar (CREATE) en la entidad TIPO_RENDIMIENTO
CREATE OR REPLACE PROCEDURE insert_tipo_rendimiento(
    p_NOMBRE_RENDIMIENTO IN TIPO_RENDIMIENTO.NOMBRE_RENDIMIENT%TYPE
) IS
BEGIN
    INSERT INTO TIPO_RENDIMIENTO (NOMBRE_RENDIMIENT) VALUES (p_NOMBRE_RENDIMIENTO);
    COMMIT;
END;
/

-- Procedimiento para Actualizar (UPDATE) en la entidad TIPO_RENDIMIENTO
CREATE OR REPLACE PROCEDURE update_tipo_rendimiento(
    p_ID_TIPO_RENDIMIENTO IN TIPO_RENDIMIENTO.ID_TIPO_RENDIMIENT%TYPE,
    p_NEW_NOMBRE_RENDIMIENTO IN TIPO_RENDIMIENTO.NOMBRE_RENDIMIENT%TYPE
) IS
BEGIN
    UPDATE TIPO_RENDIMIENTO
    SET NOMBRE_RENDIMIENT = p_NEW_NOMBRE_RENDIMIENTO
    WHERE ID_TIPO_RENDIMIENT = p_ID_TIPO_RENDIMIENTO;
    COMMIT;
END;
/

-- Procedimiento para Eliminar (DELETE) en la entidad TIPO_RENDIMIENTO
CREATE OR REPLACE PROCEDURE delete_tipo_rendimiento(
    p_ID_TIPO_RENDIMIENTO IN TIPO_RENDIMIENTO.ID_TIPO_RENDIMIENT%TYPE
) IS
BEGIN
    DELETE FROM TIPO_RENDIMIENTO
    WHERE ID_TIPO_RENDIMIENT = p_ID_TIPO_RENDIMIENTO;
    COMMIT;
END;
/

-- Procedimiento para Seleccionar (SELECT) de la entidad TIPO_RENDIMIENTO
CREATE OR REPLACE PROCEDURE select_tipo_rendimiento(
    p_ID_TIPO_RENDIMIENTO IN TIPO_RENDIMIENTO.ID_TIPO_RENDIMIENT%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT *
    FROM TIPO_RENDIMIENTO
    WHERE ID_TIPO_RENDIMIENT = p_ID_TIPO_RENDIMIENTO;
END;
/

-- Fin de los Procedimientos CRUD para la entidad TIPO_RENDIMIENTO


-- Procedimientos CRUD para la entidad TALLA_VESTIMENTA

-- Procedimiento para Insertar (CREATE) en la entidad TALLA_VESTIMENTA
CREATE OR REPLACE PROCEDURE insert_talla_vestimenta(
    p_NUMERO_TALLA IN TALLA_VESTIMENTA.NUMERO_TALLA%TYPE
) IS
BEGIN
    INSERT INTO TALLA_VESTIMENTA (NUMERO_TALLA) VALUES (p_NUMERO_TALLA);
    COMMIT;
END;
/

-- Procedimiento para Actualizar (UPDATE) en la entidad TALLA_VESTIMENTA
CREATE OR REPLACE PROCEDURE update_talla_vestimenta(
    p_ID_TALLA_VESTIMENTA IN TALLA_VESTIMENTA.ID_TALLA_VESTIMENTA%TYPE,
    p_NEW_NUMERO_TALLA IN TALLA_VESTIMENTA.NUMERO_TALLA%TYPE
) IS
BEGIN
    UPDATE TALLA_VESTIMENTA
    SET NUMERO_TALLA = p_NEW_NUMERO_TALLA
    WHERE ID_TALLA_VESTIMENTA = p_ID_TALLA_VESTIMENTA;
    COMMIT;
END;
/

-- Procedimiento para Eliminar (DELETE) en la entidad TALLA_VESTIMENTA
CREATE OR REPLACE PROCEDURE delete_talla_vestimenta(
    p_ID_TALLA_VESTIMENTA IN TALLA_VESTIMENTA.ID_TALLA_VESTIMENTA%TYPE
) IS
BEGIN
    DELETE FROM TALLA_VESTIMENTA
    WHERE ID_TALLA_VESTIMENTA = p_ID_TALLA_VESTIMENTA;
    COMMIT;
END;
/

-- Procedimiento para Seleccionar (SELECT) de la entidad TALLA_VESTIMENTA
CREATE OR REPLACE PROCEDURE select_talla_vestimenta(
    p_ID_TALLA_VESTIMENTA IN TALLA_VESTIMENTA.ID_TALLA_VESTIMENTA%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT *
    FROM TALLA_VESTIMENTA
    WHERE ID_TALLA_VESTIMENTA = p_ID_TALLA_VESTIMENTA;
END;
/

-- Fin de los Procedimientos CRUD para la entidad TALLA_VESTIMENTA

-- Procedimientos CRUD para la entidad TALLA_ZAPATO

-- Procedimiento para Insertar (CREATE) en la entidad TALLA_ZAPATO
CREATE OR REPLACE PROCEDURE insert_talla_zapato(
    p_NUMERO_TALLA IN TALLA_ZAPATO.NUMERO_TALLA%TYPE
) IS
BEGIN
    INSERT INTO TALLA_ZAPATO (NUMERO_TALLA) VALUES (p_NUMERO_TALLA);
    COMMIT;
END;
/

-- Procedimiento para Actualizar (UPDATE) en la entidad TALLA_ZAPATO
CREATE OR REPLACE PROCEDURE update_talla_zapato(
    p_ID_TALLA_ZAPATO IN TALLA_ZAPATO.ID_TALLA_ZAPATO%TYPE,
    p_NEW_NUMERO_TALLA IN TALLA_ZAPATO.NUMERO_TALLA%TYPE
) IS
BEGIN
    UPDATE TALLA_ZAPATO
    SET NUMERO_TALLA = p_NEW_NUMERO_TALLA
    WHERE ID_TALLA_ZAPATO = p_ID_TALLA_ZAPATO;
    COMMIT;
END;
/

-- Procedimiento para Eliminar (DELETE) en la entidad TALLA_ZAPATO
CREATE OR REPLACE PROCEDURE delete_talla_zapato(
    p_ID_TALLA_ZAPATO IN TALLA_ZAPATO.ID_TALLA_ZAPATO%TYPE
) IS
BEGIN
    DELETE FROM TALLA_ZAPATO
    WHERE ID_TALLA_ZAPATO = p_ID_TALLA_ZAPATO;
    COMMIT;
END;
/

-- Procedimiento para Seleccionar (SELECT) de la entidad TALLA_ZAPATO
CREATE OR REPLACE PROCEDURE select_talla_zapato(
    p_ID_TALLA_ZAPATO IN TALLA_ZAPATO.ID_TALLA_ZAPATO%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT *
    FROM TALLA_ZAPATO
    WHERE ID_TALLA_ZAPATO = p_ID_TALLA_ZAPATO;
END;
/

-- Fin de los Procedimientos CRUD para la entidad TALLA_ZAPATO


-- Procedimientos Almacenados CRUD para la entidad SALUD_ALERGIAS_RELATION

-- Procedimiento para Insertar (INSERT) en la entidad SALUD_ALERGIAS_RELATION
CREATE OR REPLACE PROCEDURE insert_salud_alergias_relation(
    p_ID_ALERGIA IN SALUD_ALERGIAS_RELATION.ID_ALERGIA%TYPE,
    p_ID_SALUD_STAT IN SALUD_ALERGIAS_RELATION.ID_SALUD_STAT%TYPE
) IS
BEGIN
    INSERT INTO SALUD_ALERGIAS_RELATION (ID_ALERGIA, ID_SALUD_STAT)
    VALUES (p_ID_ALERGIA, p_ID_SALUD_STAT);
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad SALUD_ALERGIAS_RELATION

-- Procedimiento para Eliminar (DELETE) en la entidad SALUD_ALERGIAS_RELATION
CREATE OR REPLACE PROCEDURE delete_salud_alergias_relation(
    p_ID_ALERGIA IN SALUD_ALERGIAS_RELATION.ID_ALERGIA%TYPE,
    p_ID_SALUD_STAT IN SALUD_ALERGIAS_RELATION.ID_SALUD_STAT%TYPE
) IS
BEGIN
    DELETE FROM SALUD_ALERGIAS_RELATION
    WHERE ID_ALERGIA = p_ID_ALERGIA AND ID_SALUD_STAT = p_ID_SALUD_STAT;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad SALUD_ALERGIAS_RELATION

-- Procedimiento para Actualizar (UPDATE) en la entidad SALUD_ALERGIAS_RELATION
CREATE OR REPLACE PROCEDURE update_salud_alergias_relation(
    p_ID_ALERGIA IN SALUD_ALERGIAS_RELATION.ID_ALERGIA%TYPE,
    p_ID_SALUD_STAT IN SALUD_ALERGIAS_RELATION.ID_SALUD_STAT%TYPE,
    p_NEW_ID_ALERGIA IN SALUD_ALERGIAS_RELATION.ID_ALERGIA%TYPE,
    p_NEW_ID_SALUD_STAT IN SALUD_ALERGIAS_RELATION.ID_SALUD_STAT%TYPE
) IS
BEGIN
    UPDATE SALUD_ALERGIAS_RELATION
    SET ID_ALERGIA = p_NEW_ID_ALERGIA, ID_SALUD_STAT = p_NEW_ID_SALUD_STAT
    WHERE ID_ALERGIA = p_ID_ALERGIA AND ID_SALUD_STAT = p_ID_SALUD_STAT;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad SALUD_ALERGIAS_RELATION

-- Procedimiento para Seleccionar (SELECT) de la entidad SALUD_ALERGIAS_RELATION
CREATE OR REPLACE PROCEDURE select_salud_alergias_relation(
    p_ID_ALERGIA IN SALUD_ALERGIAS_RELATION.ID_ALERGIA%TYPE,
    p_ID_SALUD_STAT IN SALUD_ALERGIAS_RELATION.ID_SALUD_STAT%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT *
    FROM SALUD_ALERGIAS_RELATION
    WHERE ID_ALERGIA = p_ID_ALERGIA AND ID_SALUD_STAT = p_ID_SALUD_STAT;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) de la entidad SALUD_ALERGIAS_RELATION

-- Procedimiento para Insertar (INSERT) en la entidad SALUD_MEDICAMENT_RELATION
CREATE OR REPLACE PROCEDURE insert_salud_medicament_relation(
    p_ID_MEDICAMENTO IN SALUD_MEDICAMENT_RELATION.ID_MEDICAMENTO%TYPE,
    p_ID_SALUD_STAT IN SALUD_MEDICAMENT_RELATION.ID_SALUD_STAT%TYPE
) IS
BEGIN
    INSERT INTO SALUD_MEDICAMENT_RELATION (ID_MEDICAMENTO, ID_SALUD_STAT)
    VALUES (p_ID_MEDICAMENTO, p_ID_SALUD_STAT);
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad SALUD_MEDICAMENT_RELATION

-- Procedimiento para Eliminar (DELETE) en la entidad SALUD_MEDICAMENT_RELATION
CREATE OR REPLACE PROCEDURE delete_salud_medicament_relation(
    p_ID_MEDICAMENTO IN SALUD_MEDICAMENT_RELATION.ID_MEDICAMENTO%TYPE,
    p_ID_SALUD_STAT IN SALUD_MEDICAMENT_RELATION.ID_SALUD_STAT%TYPE
) IS
BEGIN
    DELETE FROM SALUD_MEDICAMENT_RELATION
    WHERE ID_MEDICAMENTO = p_ID_MEDICAMENTO AND ID_SALUD_STAT = p_ID_SALUD_STAT;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad SALUD_MEDICAMENT_RELATION

-- Procedimiento para Actualizar (UPDATE) en la entidad SALUD_MEDICAMENT_RELATION
CREATE OR REPLACE PROCEDURE update_salud_medicament_relation(
    p_ID_MEDICAMENTO IN SALUD_MEDICAMENT_RELATION.ID_MEDICAMENTO%TYPE,
    p_ID_SALUD_STAT IN SALUD_MEDICAMENT_RELATION.ID_SALUD_STAT%TYPE,
    p_NEW_ID_MEDICAMENTO IN SALUD_MEDICAMENT_RELATION.ID_MEDICAMENTO%TYPE,
    p_NEW_ID_SALUD_STAT IN SALUD_MEDICAMENT_RELATION.ID_SALUD_STAT%TYPE
) IS
BEGIN
    UPDATE SALUD_MEDICAMENT_RELATION
    SET ID_MEDICAMENTO = p_NEW_ID_MEDICAMENTO, ID_SALUD_STAT = p_NEW_ID_SALUD_STAT
    WHERE ID_MEDICAMENTO = p_ID_MEDICAMENTO AND ID_SALUD_STAT = p_ID_SALUD_STAT;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad SALUD_MEDICAMENT_RELATION

-- Procedimiento para Seleccionar (SELECT) de la entidad SALUD_MEDICAMENT_RELATION
CREATE OR REPLACE PROCEDURE select_salud_medicament_relation(
    p_ID_MEDICAMENTO IN SALUD_MEDICAMENT_RELATION.ID_MEDICAMENTO%TYPE,
    p_ID_SALUD_STAT IN SALUD_MEDICAMENT_RELATION.ID_SALUD_STAT%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT *
    FROM SALUD_MEDICAMENT_RELATION
    WHERE ID_MEDICAMENTO = p_ID_MEDICAMENTO AND ID_SALUD_STAT = p_ID_SALUD_STAT;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) de la entidad SALUD_MEDICAMENT_RELATION



-- Procedimientos Almacenados CRUD para la entidad RENDIMIENTO

-- Procedimiento para Insertar (INSERT) en la entidad RENDIMIENTO
CREATE OR REPLACE PROCEDURE insert_rendimiento(
    p_ID_ACTIVIDAD IN RENDIMIENTO.ID_ACTIVIDAD%TYPE,
    p_ID_TIPO_RENDIMIENT IN RENDIMIENTO.ID_TIPO_RENDIMIENT%TYPE,
    p_ID_NINIO IN RENDIMIENTO.ID_NINIO%TYPE,
    p_OBSERVACIONES IN RENDIMIENTO.OBSERVACIONES%TYPE
) IS
BEGIN
    INSERT INTO RENDIMIENTO (
        ID_ACTIVIDAD, ID_TIPO_RENDIMIENT, ID_NINIO, OBSERVACIONES
    ) VALUES (
        p_ID_ACTIVIDAD, p_ID_TIPO_RENDIMIENT, p_ID_NINIO, p_OBSERVACIONES
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad RENDIMIENTO

-- Procedimiento para Actualizar (UPDATE) en la entidad RENDIMIENTO
CREATE OR REPLACE PROCEDURE update_rendimiento(
    p_ID_RENDIMIENTO IN RENDIMIENTO.ID_RENDIMIENTO%TYPE,
    new_ID_ACTIVIDAD IN RENDIMIENTO.ID_ACTIVIDAD%TYPE,
    new_ID_TIPO_RENDIMIENT IN RENDIMIENTO.ID_TIPO_RENDIMIENT%TYPE,
    new_ID_NINIO IN RENDIMIENTO.ID_NINIO%TYPE,
    new_OBSERVACIONES IN RENDIMIENTO.OBSERVACIONES%TYPE
) IS
BEGIN
    UPDATE RENDIMIENTO
    SET 
        ID_ACTIVIDAD = new_ID_ACTIVIDAD,
        ID_TIPO_RENDIMIENT = new_ID_TIPO_RENDIMIENT,
        ID_NINIO = new_ID_NINIO,
        OBSERVACIONES = new_OBSERVACIONES
    WHERE ID_RENDIMIENTO = p_ID_RENDIMIENTO;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad RENDIMIENTO

-- Procedimiento para Eliminar (DELETE) en la entidad RENDIMIENTO
CREATE OR REPLACE PROCEDURE delete_rendimiento(
    p_ID_RENDIMIENTO IN RENDIMIENTO.ID_RENDIMIENTO%TYPE
) IS
BEGIN
    DELETE FROM RENDIMIENTO
    WHERE ID_RENDIMIENTO = p_ID_RENDIMIENTO;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad RENDIMIENTO

-- Procedimiento para Seleccionar (SELECT) en la entidad RENDIMIENTO
CREATE OR REPLACE PROCEDURE select_rendimiento(
    p_ID_RENDIMIENTO IN RENDIMIENTO.ID_RENDIMIENTO%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_RENDIMIENTO, ID_ACTIVIDAD, ID_TIPO_RENDIMIENT, ID_NINIO, OBSERVACIONES
    FROM RENDIMIENTO
    WHERE ID_RENDIMIENTO = p_ID_RENDIMIENTO;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) en la entidad RENDIMIENTO


-- Procedimientos Almacenados CRUD para la entidad RELACION

-- Procedimiento para Insertar (INSERT) en la entidad RELACION
CREATE OR REPLACE PROCEDURE insert_relacion(
    p_NOMBRE_PARENTESCO IN RELACION.NOMBRE_PARENTESCO%TYPE
) IS
BEGIN
    INSERT INTO RELACION (
        NOMBRE_PARENTESCO
    ) VALUES (
        p_NOMBRE_PARENTESCO
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad RELACION

-- Procedimiento para Actualizar (UPDATE) en la entidad RELACION
CREATE OR REPLACE PROCEDURE update_relacion(
    p_ID_PARENTESCO IN RELACION.ID_PARENTESCO%TYPE,
    new_NOMBRE_PARENTESCO IN RELACION.NOMBRE_PARENTESCO%TYPE
) IS
BEGIN
    UPDATE RELACION
    SET 
        NOMBRE_PARENTESCO = new_NOMBRE_PARENTESCO
    WHERE ID_PARENTESCO = p_ID_PARENTESCO;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad RELACION

-- Procedimiento para Eliminar (DELETE) en la entidad RELACION
CREATE OR REPLACE PROCEDURE delete_relacion(
    p_ID_PARENTESCO IN RELACION.ID_PARENTESCO%TYPE
) IS
BEGIN
    DELETE FROM RELACION
    WHERE ID_PARENTESCO = p_ID_PARENTESCO;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad RELACION

-- Procedimiento para Seleccionar (SELECT) en la entidad RELACION
CREATE OR REPLACE PROCEDURE select_relacion(
    p_ID_PARENTESCO IN RELACION.ID_PARENTESCO%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_PARENTESCO, NOMBRE_PARENTESCO
    FROM RELACION
    WHERE ID_PARENTESCO = p_ID_PARENTESCO;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) en la entidad RELACION

-- Procedimientos Almacenados CRUD para la entidad RELACION_PADRE_NINIO

-- Procedimiento para Insertar (INSERT) en la entidad RELACION_PADRE_NINIO
CREATE OR REPLACE PROCEDURE insert_relacion_padre_ninio(
    p_ID_PADRE IN RELACION_PADRE_NINIO.ID_PADRE%TYPE,
    p_ID_NINIO IN RELACION_PADRE_NINIO.ID_NINIO%TYPE
) IS
BEGIN
    INSERT INTO RELACION_PADRE_NINIO (
        ID_PADRE, ID_NINIO
    ) VALUES (
        p_ID_PADRE, p_ID_NINIO
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad RELACION_PADRE_NINIO

-- Procedimiento para Actualizar (UPDATE) en la entidad RELACION_PADRE_NINIO
CREATE OR REPLACE PROCEDURE update_relacion_padre_ninio(
    p_ID_PADRE IN RELACION_PADRE_NINIO.ID_PADRE%TYPE,
    p_ID_NINIO IN RELACION_PADRE_NINIO.ID_NINIO%TYPE,
    new_ID_PADRE IN RELACION_PADRE_NINIO.ID_PADRE%TYPE,
    new_ID_NINIO IN RELACION_PADRE_NINIO.ID_NINIO%TYPE
) IS
BEGIN
    UPDATE RELACION_PADRE_NINIO
    SET 
        ID_PADRE = new_ID_PADRE,
        ID_NINIO = new_ID_NINIO
    WHERE ID_PADRE = p_ID_PADRE AND ID_NINIO = p_ID_NINIO;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad RELACION_PADRE_NINIO

-- Procedimiento para Eliminar (DELETE) en la entidad RELACION_PADRE_NINIO
CREATE OR REPLACE PROCEDURE delete_relacion_padre_ninio(
    p_ID_PADRE IN RELACION_PADRE_NINIO.ID_PADRE%TYPE,
    p_ID_NINIO IN RELACION_PADRE_NINIO.ID_NINIO%TYPE
) IS
BEGIN
    DELETE FROM RELACION_PADRE_NINIO
    WHERE ID_PADRE = p_ID_PADRE AND ID_NINIO = p_ID_NINIO;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad RELACION_PADRE_NINIO

-- Procedimiento para Seleccionar (SELECT) en la entidad RELACION_PADRE_NINIO
CREATE OR REPLACE PROCEDURE select_relacion_padre_ninio(
    p_ID_PADRE IN RELACION_PADRE_NINIO.ID_PADRE%TYPE,
    p_ID_NINIO IN RELACION_PADRE_NINIO.ID_NINIO%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_PADRE, ID_NINIO
    FROM RELACION_PADRE_NINIO
    WHERE ID_PADRE = p_ID_PADRE AND ID_NINIO = p_ID_NINIO;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) en la entidad RELACION_PADRE_NINIO


-- Procedimientos Almacenados CRUD para la entidad PROGRAMA

-- Procedimiento para Insertar (INSERT) en la entidad PROGRAMA
CREATE OR REPLACE PROCEDURE insert_programa(
    p_ID_ANO_LECTIVO IN PROGRAMA.ID_ANO_LECTIVO%TYPE,
    p_NOMBRE_PROGRAMA IN PROGRAMA.NOMBRE_PROGRAMA%TYPE
) IS
BEGIN
    INSERT INTO PROGRAMA (
        ID_ANO_LECTIVO, NOMBRE_PROGRAMA
    ) VALUES (
        p_ID_ANO_LECTIVO, p_NOMBRE_PROGRAMA
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad PROGRAMA

-- Procedimiento para Actualizar (UPDATE) en la entidad PROGRAMA
CREATE OR REPLACE PROCEDURE update_programa(
    p_ID_PROGRAMA IN PROGRAMA.ID_PROGRAMA%TYPE,
    new_ID_ANO_LECTIVO IN PROGRAMA.ID_ANO_LECTIVO%TYPE,
    new_NOMBRE_PROGRAMA IN PROGRAMA.NOMBRE_PROGRAMA%TYPE
) IS
BEGIN
    UPDATE PROGRAMA
    SET 
        ID_ANO_LECTIVO = new_ID_ANO_LECTIVO,
        NOMBRE_PROGRAMA = new_NOMBRE_PROGRAMA
    WHERE ID_PROGRAMA = p_ID_PROGRAMA;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad PROGRAMA

-- Procedimiento para Eliminar (DELETE) en la entidad PROGRAMA
CREATE OR REPLACE PROCEDURE delete_programa(
    p_ID_PROGRAMA IN PROGRAMA.ID_PROGRAMA%TYPE
) IS
BEGIN
    DELETE FROM PROGRAMA
    WHERE ID_PROGRAMA = p_ID_PROGRAMA;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad PROGRAMA

-- Procedimiento para Seleccionar (SELECT) en la entidad PROGRAMA
CREATE OR REPLACE PROCEDURE select_programa(
    p_ID_PROGRAMA IN PROGRAMA.ID_PROGRAMA%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_PROGRAMA, ID_ANO_LECTIVO, NOMBRE_PROGRAMA
    FROM PROGRAMA
    WHERE ID_PROGRAMA = p_ID_PROGRAMA;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) en la entidad PROGRAMA


-- Procedimientos Almacenados CRUD para la entidad PROFESIONAL

-- Procedimiento para Insertar (INSERT) en la entidad PROFESIONAL
CREATE OR REPLACE PROCEDURE insert_profesional(
    p_ID_ACTIVIDAD IN PROFESIONAL.ID_ACTIVIDAD%TYPE,
    p_ID_GENERO IN PROFESIONAL.ID_GENERO%TYPE,
    p_ID_NACIONALIDAD IN PROFESIONAL.ID_NACIONALIDAD%TYPE,
    p_NOMBRES_PROF IN PROFESIONAL.NOMBRES_PROF%TYPE,
    p_APELLIDOS_PROF IN PROFESIONAL.APELLIDOS_PROF%TYPE,
    p_CI_PROF IN PROFESIONAL.CI_PROF%TYPE,
    p_DIRECCION_PROF IN PROFESIONAL.DIRECCION_PROF%TYPE,
    p_TELEFONO_PROF IN PROFESIONAL.TELEFONO_PROF%TYPE,
    p_NO_CERTIFI_SENECYT IN PROFESIONAL.NO_CERTIFI_SENECYT%TYPE
) IS
BEGIN
    INSERT INTO PROFESIONAL (
        ID_ACTIVIDAD, ID_GENERO, ID_NACIONALIDAD, 
        NOMBRES_PROF, APELLIDOS_PROF, CI_PROF, 
        DIRECCION_PROF, TELEFONO_PROF, NO_CERTIFI_SENECYT
    ) VALUES (
        p_ID_ACTIVIDAD, p_ID_GENERO, p_ID_NACIONALIDAD, 
        p_NOMBRES_PROF, p_APELLIDOS_PROF, p_CI_PROF, 
        p_DIRECCION_PROF, p_TELEFONO_PROF, p_NO_CERTIFI_SENECYT
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad PROFESIONAL

-- Procedimiento para Actualizar (UPDATE) en la entidad PROFESIONAL
CREATE OR REPLACE PROCEDURE update_profesional(
    p_ID_PROF IN PROFESIONAL.ID_PROF%TYPE,
    new_ID_ACTIVIDAD IN PROFESIONAL.ID_ACTIVIDAD%TYPE,
    new_ID_GENERO IN PROFESIONAL.ID_GENERO%TYPE,
    new_ID_NACIONALIDAD IN PROFESIONAL.ID_NACIONALIDAD%TYPE,
    new_NOMBRES_PROF IN PROFESIONAL.NOMBRES_PROF%TYPE,
    new_APELLIDOS_PROF IN PROFESIONAL.APELLIDOS_PROF%TYPE,
    new_CI_PROF IN PROFESIONAL.CI_PROF%TYPE,
    new_DIRECCION_PROF IN PROFESIONAL.DIRECCION_PROF%TYPE,
    new_TELEFONO_PROF IN PROFESIONAL.TELEFONO_PROF%TYPE,
    new_NO_CERTIFI_SENECYT IN PROFESIONAL.NO_CERTIFI_SENECYT%TYPE
) IS
BEGIN
    UPDATE PROFESIONAL
    SET 
        ID_ACTIVIDAD = new_ID_ACTIVIDAD,
        ID_GENERO = new_ID_GENERO,
        ID_NACIONALIDAD = new_ID_NACIONALIDAD,
        NOMBRES_PROF = new_NOMBRES_PROF,
        APELLIDOS_PROF = new_APELLIDOS_PROF,
        CI_PROF = new_CI_PROF,
        DIRECCION_PROF = new_DIRECCION_PROF,
        TELEFONO_PROF = new_TELEFONO_PROF,
        NO_CERTIFI_SENECYT = new_NO_CERTIFI_SENECYT
    WHERE ID_PROF = p_ID_PROF;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad PROFESIONAL

-- Procedimiento para Eliminar (DELETE) en la entidad PROFESIONAL
CREATE OR REPLACE PROCEDURE delete_profesional(
    p_ID_PROF IN PROFESIONAL.ID_PROF%TYPE
) IS
BEGIN
    DELETE FROM PROFESIONAL
    WHERE ID_PROF = p_ID_PROF;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad PROFESIONAL

-- Procedimiento para Seleccionar (SELECT) en la entidad PROFESIONAL
CREATE OR REPLACE PROCEDURE select_profesional(
    p_ID_PROF IN PROFESIONAL.ID_PROF%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_PROF, ID_ACTIVIDAD, ID_GENERO, 
        ID_NACIONALIDAD, NOMBRES_PROF, APELLIDOS_PROF, 
        CI_PROF, DIRECCION_PROF, TELEFONO_PROF, NO_CERTIFI_SENECYT
    FROM PROFESIONAL
    WHERE ID_PROF = p_ID_PROF;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) en la entidad PROFESIONAL


-- Procedimientos Almacenados CRUD para la entidad PADRE

-- Procedimiento para Insertar (INSERT) en la entidad PADRE
CREATE OR REPLACE PROCEDURE insert_padre(
    p_ID_GENERO IN PADRE.ID_GENERO%TYPE,
    p_ID_NACIONALIDAD IN PADRE.ID_NACIONALIDAD%TYPE,
    p_NOMBRE_PADRE IN PADRE.NOMBRE_PADRE%TYPE,
    p_APELLIDO_PADRE IN PADRE.APELLIDO_PADRE%TYPE,
    p_CI_PADRE IN PADRE.CI_PADRE%TYPE,
    p_DIRECCION_PADRE IN PADRE.DIRECCION_PADRE%TYPE,
    p_TELEFONO_PADRE IN PADRE.TELEFONO_PADRE%TYPE,
    p_DOMICILIO_PADRE IN PADRE.DOMICILIO_PADRE%TYPE
) IS
BEGIN
    INSERT INTO PADRE (
        ID_GENERO, ID_NACIONALIDAD, NOMBRE_PADRE, 
        APELLIDO_PADRE, CI_PADRE, DIRECCION_PADRE, 
        TELEFONO_PADRE, DOMICILIO_PADRE
    ) VALUES (
        p_ID_GENERO, p_ID_NACIONALIDAD, p_NOMBRE_PADRE, 
        p_APELLIDO_PADRE, p_CI_PADRE, p_DIRECCION_PADRE, 
        p_TELEFONO_PADRE, p_DOMICILIO_PADRE
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad PADRE


-- Procedimiento para Actualizar (UPDATE) en la entidad PADRE
CREATE OR REPLACE PROCEDURE update_padre(
    p_ID_PADRE IN PADRE.ID_PADRE%TYPE,
    new_ID_GENERO IN PADRE.ID_GENERO%TYPE,
    new_ID_NACIONALIDAD IN PADRE.ID_NACIONALIDAD%TYPE,
    new_NOMBRE_PADRE IN PADRE.NOMBRE_PADRE%TYPE,
    new_APELLIDO_PADRE IN PADRE.APELLIDO_PADRE%TYPE,
    new_CI_PADRE IN PADRE.CI_PADRE%TYPE,
    new_DIRECCION_PADRE IN PADRE.DIRECCION_PADRE%TYPE,
    new_TELEFONO_PADRE IN PADRE.TELEFONO_PADRE%TYPE,
    new_DOMICILIO_PADRE IN PADRE.DOMICILIO_PADRE%TYPE
) IS
BEGIN
    UPDATE PADRE
    SET 
        ID_GENERO = new_ID_GENERO,
        ID_NACIONALIDAD = new_ID_NACIONALIDAD,
        NOMBRE_PADRE = new_NOMBRE_PADRE,
        APELLIDO_PADRE = new_APELLIDO_PADRE,
        CI_PADRE = new_CI_PADRE,
        DIRECCION_PADRE = new_DIRECCION_PADRE,
        TELEFONO_PADRE = new_TELEFONO_PADRE,
        DOMICILIO_PADRE = new_DOMICILIO_PADRE
    WHERE ID_PADRE = p_ID_PADRE;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad PADRE


-- Procedimiento para Eliminar (DELETE) en la entidad PADRE
CREATE OR REPLACE PROCEDURE delete_padre(
    p_ID_PADRE IN PADRE.ID_PADRE%TYPE
) IS
BEGIN
    DELETE FROM PADRE
    WHERE ID_PADRE = p_ID_PADRE;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad PADRE


-- Procedimiento para Seleccionar (SELECT) en la entidad PADRE
CREATE OR REPLACE PROCEDURE select_padre(
    p_ID_PADRE IN PADRE.ID_PADRE%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_PADRE, ID_GENERO, ID_NACIONALIDAD, 
        NOMBRE_PADRE, APELLIDO_PADRE, CI_PADRE, 
        DIRECCION_PADRE, TELEFONO_PADRE, DOMICILIO_PADRE
    FROM PADRE
    WHERE ID_PADRE = p_ID_PADRE;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) en la entidad PADRE


-- Procedimientos Almacenados CRUD para la entidad NACIONALIDAD

-- Procedimiento para Insertar (INSERT) en la entidad NACIONALIDAD
CREATE OR REPLACE PROCEDURE insert_nacionalidad(
    p_NOMBRE_NACIONALIDAD IN NACIONALIDAD.NOMBRE_NACIONALIDAD%TYPE
) IS
BEGIN
    INSERT INTO NACIONALIDAD (
        NOMBRE_NACIONALIDAD
    ) VALUES (
        p_NOMBRE_NACIONALIDAD
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad NACIONALIDAD


-- Procedimiento para Actualizar (UPDATE) en la entidad NACIONALIDAD
CREATE OR REPLACE PROCEDURE update_nacionalidad(
    p_ID_NACIONALIDAD IN NACIONALIDAD.ID_NACIONALIDAD%TYPE,
    new_NOMBRE_NACIONALIDAD IN NACIONALIDAD.NOMBRE_NACIONALIDAD%TYPE
) IS
BEGIN
    UPDATE NACIONALIDAD
    SET 
        NOMBRE_NACIONALIDAD = new_NOMBRE_NACIONALIDAD
    WHERE ID_NACIONALIDAD = p_ID_NACIONALIDAD;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad NACIONALIDAD


-- Procedimiento para Eliminar (DELETE) en la entidad NACIONALIDAD
CREATE OR REPLACE PROCEDURE delete_nacionalidad(
    p_ID_NACIONALIDAD IN NACIONALIDAD.ID_NACIONALIDAD%TYPE
) IS
BEGIN
    DELETE FROM NACIONALIDAD
    WHERE ID_NACIONALIDAD = p_ID_NACIONALIDAD;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad NACIONALIDAD


-- Procedimiento para Seleccionar (SELECT) en la entidad NACIONALIDAD
CREATE OR REPLACE PROCEDURE select_nacionalidad(
    p_ID_NACIONALIDAD IN NACIONALIDAD.ID_NACIONALIDAD%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_NACIONALIDAD, NOMBRE_NACIONALIDAD
    FROM NACIONALIDAD
    WHERE ID_NACIONALIDAD = p_ID_NACIONALIDAD;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) en la entidad NACIONALIDAD


-- Procedimientos Almacenados CRUD para la entidad MEDICAMENTO

-- Procedimiento para Insertar (INSERT) en la entidad MEDICAMENTO
CREATE OR REPLACE PROCEDURE insert_medicamento(
    p_NOMBRE_MEDICAMENTO IN MEDICAMENTO.NOMBRE_MEDICAMENTO%TYPE,
    p_DESCRIPTION_MEDICAMENTO IN MEDICAMENTO.DESCRIPTION_MEDICAMENTO%TYPE
) IS
BEGIN
    INSERT INTO MEDICAMENTO (
        NOMBRE_MEDICAMENTO, DESCRIPTION_MEDICAMENTO
    ) VALUES (
        p_NOMBRE_MEDICAMENTO, p_DESCRIPTION_MEDICAMENTO
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad MEDICAMENTO


-- Procedimiento para Actualizar (UPDATE) en la entidad MEDICAMENTO
CREATE OR REPLACE PROCEDURE update_medicamento(
    p_ID_MEDICAMENTO IN MEDICAMENTO.ID_MEDICAMENTO%TYPE,
    new_NOMBRE_MEDICAMENTO IN MEDICAMENTO.NOMBRE_MEDICAMENTO%TYPE,
    new_DESCRIPTION_MEDICAMENTO IN MEDICAMENTO.DESCRIPTION_MEDICAMENTO%TYPE
) IS
BEGIN
    UPDATE MEDICAMENTO
    SET 
        NOMBRE_MEDICAMENTO = new_NOMBRE_MEDICAMENTO,
        DESCRIPTION_MEDICAMENTO = new_DESCRIPTION_MEDICAMENTO
    WHERE ID_MEDICAMENTO = p_ID_MEDICAMENTO;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad MEDICAMENTO


-- Procedimiento para Eliminar (DELETE) en la entidad MEDICAMENTO
CREATE OR REPLACE PROCEDURE delete_medicamento(
    p_ID_MEDICAMENTO IN MEDICAMENTO.ID_MEDICAMENTO%TYPE
) IS
BEGIN
    DELETE FROM MEDICAMENTO
    WHERE ID_MEDICAMENTO = p_ID_MEDICAMENTO;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad MEDICAMENTO


-- Procedimiento para Seleccionar (SELECT) en la entidad MEDICAMENTO
CREATE OR REPLACE PROCEDURE select_medicamento(
    p_ID_MEDICAMENTO IN MEDICAMENTO.ID_MEDICAMENTO%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_MEDICAMENTO, NOMBRE_MEDICAMENTO, DESCRIPTION_MEDICAMENTO
    FROM MEDICAMENTO
    WHERE ID_MEDICAMENTO = p_ID_MEDICAMENTO;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) en la entidad MEDICAMENTO


-- Procedimientos Almacenados CRUD para la entidad MATRICULA

-- Procedimiento para Insertar (INSERT) en la entidad MATRICULA
CREATE OR REPLACE PROCEDURE insert_matricula(
    p_ID_NINIO IN MATRICULA.ID_NINIO%TYPE,
    p_ID_ANO_LECTIVO IN MATRICULA.ID_ANO_LECTIVO%TYPE,
    p_PRECIO_MATRICULA IN MATRICULA.PRECIO_MATRICULA%TYPE
) IS
BEGIN
    INSERT INTO MATRICULA (
        ID_NINIO, ID_ANO_LECTIVO, PRECIO_MATRICULA
    ) VALUES (
        p_ID_NINIO, p_ID_ANO_LECTIVO, p_PRECIO_MATRICULA
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad MATRICULA


-- Procedimiento para Actualizar (UPDATE) en la entidad MATRICULA
CREATE OR REPLACE PROCEDURE update_matricula(
    p_ID_MATRICULA IN MATRICULA.ID_MATRICULA%TYPE,
    new_ID_NINIO IN MATRICULA.ID_NINIO%TYPE,
    new_ID_ANO_LECTIVO IN MATRICULA.ID_ANO_LECTIVO%TYPE,
    new_PRECIO_MATRICULA IN MATRICULA.PRECIO_MATRICULA%TYPE
) IS
BEGIN
    UPDATE MATRICULA
    SET 
        ID_NINIO = new_ID_NINIO,
        ID_ANO_LECTIVO = new_ID_ANO_LECTIVO,
        PRECIO_MATRICULA = new_PRECIO_MATRICULA
    WHERE ID_MATRICULA = p_ID_MATRICULA;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad MATRICULA


-- Procedimiento para Eliminar (DELETE) en la entidad MATRICULA
CREATE OR REPLACE PROCEDURE delete_matricula(
    p_ID_MATRICULA IN MATRICULA.ID_MATRICULA%TYPE
) IS
BEGIN
    DELETE FROM MATRICULA
    WHERE ID_MATRICULA = p_ID_MATRICULA;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad MATRICULA


-- Procedimiento para Seleccionar (SELECT) en la entidad MATRICULA
CREATE OR REPLACE PROCEDURE select_matricula(
    p_ID_MATRICULA IN MATRICULA.ID_MATRICULA%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_MATRICULA, ID_NINIO, ID_ANO_LECTIVO, PRECIO_MATRICULA
    FROM MATRICULA
    WHERE ID_MATRICULA = p_ID_MATRICULA;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) en la entidad MATRICULA


-- Procedimientos Almacenados CRUD para la entidad MATERIAL

-- Procedimiento para Insertar (INSERT) en la entidad MATERIAL
CREATE OR REPLACE PROCEDURE insert_material(
    p_NOMBRE_MATERIAL IN MATERIAL.NOMBRE_MATERIAL%TYPE
) IS
BEGIN
    INSERT INTO MATERIAL (
        NOMBRE_MATERIAL
    ) VALUES (
        p_NOMBRE_MATERIAL
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad MATERIAL


-- Procedimiento para Actualizar (UPDATE) en la entidad MATERIAL
CREATE OR REPLACE PROCEDURE update_material(
    p_ID_MATERIAL IN MATERIAL.ID_MATERIAL%TYPE,
    new_NOMBRE_MATERIAL IN MATERIAL.NOMBRE_MATERIAL%TYPE
) IS
BEGIN
    UPDATE MATERIAL
    SET 
        NOMBRE_MATERIAL = new_NOMBRE_MATERIAL
    WHERE ID_MATERIAL = p_ID_MATERIAL;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad MATERIAL


-- Procedimiento para Eliminar (DELETE) en la entidad MATERIAL
CREATE OR REPLACE PROCEDURE delete_material(
    p_ID_MATERIAL IN MATERIAL.ID_MATERIAL%TYPE
) IS
BEGIN
    DELETE FROM MATERIAL
    WHERE ID_MATERIAL = p_ID_MATERIAL;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad MATERIAL


-- Procedimiento para Seleccionar (SELECT) en la entidad MATERIAL
CREATE OR REPLACE PROCEDURE select_material(
    p_ID_MATERIAL IN MATERIAL.ID_MATERIAL%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_MATERIAL, NOMBRE_MATERIAL
    FROM MATERIAL
    WHERE ID_MATERIAL = p_ID_MATERIAL;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) en la entidad MATERIAL


-- Procedimientos Almacenados CRUD para la entidad GENERO

-- Procedimiento para Insertar (INSERT) en la entidad GENERO
CREATE OR REPLACE PROCEDURE insert_genero(
    p_NOMBRE_GENERO IN GENERO.NOMBRE_GENERO%TYPE
) IS
BEGIN
    INSERT INTO GENERO (
        NOMBRE_GENERO
    ) VALUES (
        p_NOMBRE_GENERO
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad GENERO


-- Procedimiento para Actualizar (UPDATE) en la entidad GENERO
CREATE OR REPLACE PROCEDURE update_genero(
    p_ID_GENERO IN GENERO.ID_GENERO%TYPE,
    new_NOMBRE_GENERO IN GENERO.NOMBRE_GENERO%TYPE
) IS
BEGIN
    UPDATE GENERO
    SET 
        NOMBRE_GENERO = new_NOMBRE_GENERO
    WHERE ID_GENERO = p_ID_GENERO;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad GENERO


-- Procedimiento para Eliminar (DELETE) en la entidad GENERO
CREATE OR REPLACE PROCEDURE delete_genero(
    p_ID_GENERO IN GENERO.ID_GENERO%TYPE
) IS
BEGIN
    DELETE FROM GENERO
    WHERE ID_GENERO = p_ID_GENERO;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad GENERO


-- Procedimiento para Seleccionar (SELECT) en la entidad GENERO
CREATE OR REPLACE PROCEDURE select_genero(
    p_ID_GENERO IN GENERO.ID_GENERO%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_GENERO, NOMBRE_GENERO
    FROM GENERO
    WHERE ID_GENERO = p_ID_GENERO;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) en la entidad GENERO


-- Procedimientos Almacenados CRUD para la entidad ESTADO_SALUD

-- Procedimiento para Insertar (INSERT) en la entidad ESTADO_SALUD
CREATE OR REPLACE PROCEDURE insert_estado_salud(
    p_ID_NINIO IN ESTADO_SALUD.ID_NINIO%TYPE,
    p_ULTIMA_FECHA_ENFERMO IN ESTADO_SALUD.ULTIMA_FECHA_ENFERMO%TYPE,
    p_DIAGNOSTICO IN ESTADO_SALUD.DIAGNOSTICO%TYPE,
    p_DOCTOR_TRATANTE IN ESTADO_SALUD.DOCTOR_TRATANTE%TYPE
) IS
BEGIN
    INSERT INTO ESTADO_SALUD (
        ID_NINIO, ULTIMA_FECHA_ENFERMO, DIAGNOSTICO, DOCTOR_TRATANTE
    ) VALUES (
        p_ID_NINIO, p_ULTIMA_FECHA_ENFERMO, p_DIAGNOSTICO, p_DOCTOR_TRATANTE
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad ESTADO_SALUD


-- Procedimiento para Actualizar (UPDATE) en la entidad ESTADO_SALUD
CREATE OR REPLACE PROCEDURE update_estado_salud(
    p_ID_SALUD_STAT IN ESTADO_SALUD.ID_SALUD_STAT%TYPE,
    new_ID_NINIO IN ESTADO_SALUD.ID_NINIO%TYPE,
    new_ULTIMA_FECHA_ENFERMO IN ESTADO_SALUD.ULTIMA_FECHA_ENFERMO%TYPE,
    new_DIAGNOSTICO IN ESTADO_SALUD.DIAGNOSTICO%TYPE,
    new_DOCTOR_TRATANTE IN ESTADO_SALUD.DOCTOR_TRATANTE%TYPE
) IS
BEGIN
    UPDATE ESTADO_SALUD
    SET 
        ID_NINIO = new_ID_NINIO,
        ULTIMA_FECHA_ENFERMO = new_ULTIMA_FECHA_ENFERMO,
        DIAGNOSTICO = new_DIAGNOSTICO,
        DOCTOR_TRATANTE = new_DOCTOR_TRATANTE
    WHERE ID_SALUD_STAT = p_ID_SALUD_STAT;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad ESTADO_SALUD


-- Procedimiento para Eliminar (DELETE) en la entidad ESTADO_SALUD
CREATE OR REPLACE PROCEDURE delete_estado_salud(
    p_ID_SALUD_STAT IN ESTADO_SALUD.ID_SALUD_STAT%TYPE
) IS
BEGIN
    DELETE FROM ESTADO_SALUD
    WHERE ID_SALUD_STAT = p_ID_SALUD_STAT;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad ESTADO_SALUD


-- Procedimiento para Seleccionar (SELECT) en la entidad ESTADO_SALUD
CREATE OR REPLACE PROCEDURE select_estado_salud(
    p_ID_SALUD_STAT IN ESTADO_SALUD.ID_SALUD_STAT%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_SALUD_STAT, ID_NINIO, ULTIMA_FECHA_ENFERMO, DIAGNOSTICO, DOCTOR_TRATANTE
    FROM ESTADO_SALUD
    WHERE ID_SALUD_STAT = p_ID_SALUD_STAT;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) en la entidad ESTADO_SALUD


-- Procedimientos Almacenados CRUD para la entidad EMPLEA

-- Procedimiento para Insertar (INSERT) en la entidad EMPLEA
CREATE OR REPLACE PROCEDURE insert_emplea(
    p_ID_MATERIAL IN EMPLEA.ID_MATERIAL%TYPE,
    p_ID_ACTIVIDAD IN EMPLEA.ID_ACTIVIDAD%TYPE
) IS
BEGIN
    INSERT INTO EMPLEA (
        ID_MATERIAL, ID_ACTIVIDAD
    ) VALUES (
        p_ID_MATERIAL, p_ID_ACTIVIDAD
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad EMPLEA


-- Procedimiento para Actualizar (UPDATE) en la entidad EMPLEA
CREATE OR REPLACE PROCEDURE update_emplea(
    p_ID_MATERIAL IN EMPLEA.ID_MATERIAL%TYPE,
    p_ID_ACTIVIDAD IN EMPLEA.ID_ACTIVIDAD%TYPE,
    new_ID_MATERIAL IN EMPLEA.ID_MATERIAL%TYPE,
    new_ID_ACTIVIDAD IN EMPLEA.ID_ACTIVIDAD%TYPE
) IS
BEGIN
    UPDATE EMPLEA
    SET 
        ID_MATERIAL = new_ID_MATERIAL,
        ID_ACTIVIDAD = new_ID_ACTIVIDAD
    WHERE ID_MATERIAL = p_ID_MATERIAL AND ID_ACTIVIDAD = p_ID_ACTIVIDAD;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad EMPLEA


-- Procedimiento para Eliminar (DELETE) en la entidad EMPLEA
CREATE OR REPLACE PROCEDURE delete_emplea(
    p_ID_MATERIAL IN EMPLEA.ID_MATERIAL%TYPE,
    p_ID_ACTIVIDAD IN EMPLEA.ID_ACTIVIDAD%TYPE
) IS
BEGIN
    DELETE FROM EMPLEA
    WHERE ID_MATERIAL = p_ID_MATERIAL AND ID_ACTIVIDAD = p_ID_ACTIVIDAD;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad EMPLEA


-- Procedimiento para Seleccionar (SELECT) en la entidad EMPLEA
CREATE OR REPLACE PROCEDURE select_emplea(
    p_ID_MATERIAL IN EMPLEA.ID_MATERIAL%TYPE,
    p_ID_ACTIVIDAD IN EMPLEA.ID_ACTIVIDAD%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_MATERIAL, ID_ACTIVIDAD
    FROM EMPLEA
    WHERE ID_MATERIAL = p_ID_MATERIAL AND ID_ACTIVIDAD = p_ID_ACTIVIDAD;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) en la entidad EMPLEA


-- Procedimientos Almacenados CRUD para la entidad ANO_LECTIVO

-- Procedimiento para Insertar (INSERT) en la entidad ANO_LECTIVO
CREATE OR REPLACE PROCEDURE insert_ano_lectivo(
    p_ANO IN ANO_LECTIVO.ANO%TYPE
) IS
BEGIN
    INSERT INTO ANO_LECTIVO (
        ANO
    ) VALUES (
        p_ANO
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT) en la entidad ANO_LECTIVO


-- Procedimiento para Actualizar (UPDATE) en la entidad ANO_LECTIVO
CREATE OR REPLACE PROCEDURE update_ano_lectivo(
    p_ID_ANO_LECTIVO IN ANO_LECTIVO.ID_ANO_LECTIVO%TYPE,
    p_ANO IN ANO_LECTIVO.ANO%TYPE
) IS
BEGIN
    UPDATE ANO_LECTIVO
    SET 
        ANO = p_ANO
    WHERE ID_ANO_LECTIVO = p_ID_ANO_LECTIVO;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE) en la entidad ANO_LECTIVO


-- Procedimiento para Eliminar (DELETE) en la entidad ANO_LECTIVO
CREATE OR REPLACE PROCEDURE delete_ano_lectivo(
    p_ID_ANO_LECTIVO IN ANO_LECTIVO.ID_ANO_LECTIVO%TYPE
) IS
BEGIN
    DELETE FROM ANO_LECTIVO
    WHERE ID_ANO_LECTIVO = p_ID_ANO_LECTIVO;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE) en la entidad ANO_LECTIVO


-- Procedimiento para Seleccionar (SELECT) en la entidad ANO_LECTIVO
CREATE OR REPLACE PROCEDURE select_ano_lectivo(
    p_ID_ANO_LECTIVO IN ANO_LECTIVO.ID_ANO_LECTIVO%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_ANO_LECTIVO, ANO
    FROM ANO_LECTIVO
    WHERE ID_ANO_LECTIVO = p_ID_ANO_LECTIVO;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT) en la entidad ANO_LECTIVO


-- Procedimiento para Insertar (INSERT ALERGIA)
CREATE OR REPLACE PROCEDURE insert_alergia(
    p_NOMBRE_ALERGIA IN ALERGIAS.NOMBRE_ALERGIA%TYPE
) IS
BEGIN
    INSERT INTO ALERGIAS (
        NOMBRE_ALERGIA
    ) VALUES (
        p_NOMBRE_ALERGIA
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT)


-- Procedimiento para Actualizar (UPDATE ALERGIA)
CREATE OR REPLACE PROCEDURE update_alergia(
    p_ID_ALERGIA IN ALERGIAS.ID_ALERGIA%TYPE,
    p_NOMBRE_ALERGIA IN ALERGIAS.NOMBRE_ALERGIA%TYPE
) IS
BEGIN
    UPDATE ALERGIAS
    SET 
        NOMBRE_ALERGIA = p_NOMBRE_ALERGIA
    WHERE ID_ALERGIA = p_ID_ALERGIA;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE)


-- Procedimiento para Eliminar (DELETE ALERGIA)
CREATE OR REPLACE PROCEDURE delete_alergia(
    p_ID_ALERGIA IN ALERGIAS.ID_ALERGIA%TYPE
) IS
BEGIN
    DELETE FROM ALERGIAS
    WHERE ID_ALERGIA = p_ID_ALERGIA;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE)


-- Procedimiento para Seleccionar (SELECT ALERGIA)
CREATE OR REPLACE PROCEDURE select_alergia(
    p_ID_ALERGIA IN ALERGIAS.ID_ALERGIA%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_ALERGIA, NOMBRE_ALERGIA
    FROM ALERGIAS
    WHERE ID_ALERGIA = p_ID_ALERGIA;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT)



-- Procedimiento para Insertar (INSERT ACTIVIDAD)
CREATE OR REPLACE PROCEDURE insert_actividad(
    p_ID_PROGRAMA          IN ACTIVIDAD.ID_PROGRAMA%TYPE,
    p_NOMBRE_AVTIVI        IN ACTIVIDAD.NOMBRE_AVTIVI%TYPE,
    p_DESCRIPCION_ACTIVI   IN ACTIVIDAD.DESCRIPCION_ACTIVI%TYPE,
    p_DURACION_ACTIVI      IN ACTIVIDAD.DURACION_ACTIVI%TYPE,
    p_FINALIZADO           IN ACTIVIDAD.FINALIZADO%TYPE
) IS
BEGIN
    INSERT INTO ACTIVIDAD (
        ID_PROGRAMA, NOMBRE_AVTIVI, DESCRIPCION_ACTIVI, DURACION_ACTIVI, FINALIZADO
    ) VALUES (
        p_ID_PROGRAMA, p_NOMBRE_AVTIVI, p_DESCRIPCION_ACTIVI, p_DURACION_ACTIVI, p_FINALIZADO
    );
END;
/
-- Fin del Procedimiento para Insertar (INSERT)


-- Procedimiento para Actualizar (UPDATE ACTIVIDAD)
CREATE OR REPLACE PROCEDURE update_actividad(
    p_ID_ACTIVIDAD         IN ACTIVIDAD.ID_ACTIVIDAD%TYPE,
    p_ID_PROGRAMA          IN ACTIVIDAD.ID_PROGRAMA%TYPE,
    p_NOMBRE_AVTIVI        IN ACTIVIDAD.NOMBRE_AVTIVI%TYPE,
    p_DESCRIPCION_ACTIVI   IN ACTIVIDAD.DESCRIPCION_ACTIVI%TYPE,
    p_DURACION_ACTIVI      IN ACTIVIDAD.DURACION_ACTIVI%TYPE,
    p_FINALIZADO           IN ACTIVIDAD.FINALIZADO%TYPE
) IS
BEGIN
    UPDATE ACTIVIDAD
    SET 
        ID_PROGRAMA = p_ID_PROGRAMA,
        NOMBRE_AVTIVI = p_NOMBRE_AVTIVI,
        DESCRIPCION_ACTIVI = p_DESCRIPCION_ACTIVI,
        DURACION_ACTIVI = p_DURACION_ACTIVI,
        FINALIZADO = p_FINALIZADO
    WHERE ID_ACTIVIDAD = p_ID_ACTIVIDAD;
END;
/
-- Fin del Procedimiento para Actualizar (UPDATE)


-- Procedimiento para Eliminar (DELETE ACTIVIDAD)
CREATE OR REPLACE PROCEDURE delete_actividad(
    p_ID_ACTIVIDAD IN ACTIVIDAD.ID_ACTIVIDAD%TYPE
) IS
BEGIN
    DELETE FROM ACTIVIDAD
    WHERE ID_ACTIVIDAD = p_ID_ACTIVIDAD;
END;
/
-- Fin del Procedimiento para Eliminar (DELETE)


-- Procedimiento para Seleccionar (SELECT ACTIVIDAD)
CREATE OR REPLACE PROCEDURE select_actividad(
    p_ID_ACTIVIDAD IN ACTIVIDAD.ID_ACTIVIDAD%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_ACTIVIDAD, ID_PROGRAMA, NOMBRE_AVTIVI, DESCRIPCION_ACTIVI, 
        DURACION_ACTIVI, FINALIZADO
    FROM ACTIVIDAD
    WHERE ID_ACTIVIDAD = p_ID_ACTIVIDAD;
END;
/
-- Fin del Procedimiento para Seleccionar (SELECT)



-- Procedimiento para insertar en NINIO
CREATE OR REPLACE PROCEDURE insert_ninio(
    p_ID_NACIONALIDAD IN NINIO.ID_NACIONALIDAD%TYPE,
    p_ID_GENERO IN NINIO.ID_GENERO%TYPE,
    p_ID_TALLA_ZAPATO IN NINIO.ID_TALLA_ZAPATO%TYPE,
    p_ID_TALLA_VESTIMENTA IN NINIO.ID_TALLA_VESTIMENTA%TYPE,
    p_CI_NINIO IN NINIO.CI_NINIO%TYPE,
    p_NOMBRE_NINIO IN NINIO.NOMBRE_NINIO%TYPE,
    p_APELLIDO_NINIO IN NINIO.APELLIDO_NINIO%TYPE,
    p_NACIMIENTO_DATE IN NINIO.NACIMIENTO_DATE%TYPE,
    p_ESTADO_MATRICULA IN NINIO.ESTADO_MATRICULA%TYPE
) IS
BEGIN
    INSERT INTO NINIO (
        ID_NACIONALIDAD, ID_GENERO, ID_TALLA_ZAPATO, ID_TALLA_VESTIMENTA, 
        CI_NINIO, NOMBRE_NINIO, APELLIDO_NINIO, NACIMIENTO_DATE, ESTADO_MATRICULA
    ) VALUES (
        p_ID_NACIONALIDAD, p_ID_GENERO, p_ID_TALLA_ZAPATO, p_ID_TALLA_VESTIMENTA, 
        p_CI_NINIO, p_NOMBRE_NINIO, p_APELLIDO_NINIO, p_NACIMIENTO_DATE, p_ESTADO_MATRICULA
    );
END;
/

-- Procedimiento para actualizar en NINIO
CREATE OR REPLACE PROCEDURE update_ninio(
    p_ID_NINIO IN NINIO.ID_NINIO%TYPE,
    p_ID_NACIONALIDAD IN NINIO.ID_NACIONALIDAD%TYPE,
    p_ID_GENERO IN NINIO.ID_GENERO%TYPE,
    p_ID_TALLA_ZAPATO IN NINIO.ID_TALLA_ZAPATO%TYPE,
    p_ID_TALLA_VESTIMENTA IN NINIO.ID_TALLA_VESTIMENTA%TYPE,
    p_CI_NINIO IN NINIO.CI_NINIO%TYPE,
    p_NOMBRE_NINIO IN NINIO.NOMBRE_NINIO%TYPE,
    p_APELLIDO_NINIO IN NINIO.APELLIDO_NINIO%TYPE,
    p_NACIMIENTO_DATE IN NINIO.NACIMIENTO_DATE%TYPE,
    p_ESTADO_MATRICULA IN NINIO.ESTADO_MATRICULA%TYPE
) IS
BEGIN
    UPDATE NINIO
    SET 
        ID_NACIONALIDAD = p_ID_NACIONALIDAD,
        ID_GENERO = p_ID_GENERO,
        ID_TALLA_ZAPATO = p_ID_TALLA_ZAPATO,
        ID_TALLA_VESTIMENTA = p_ID_TALLA_VESTIMENTA,
        CI_NINIO = p_CI_NINIO,
        NOMBRE_NINIO = p_NOMBRE_NINIO,
        APELLIDO_NINIO = p_APELLIDO_NINIO,
        NACIMIENTO_DATE = p_NACIMIENTO_DATE,
        ESTADO_MATRICULA = p_ESTADO_MATRICULA
    WHERE ID_NINIO = p_ID_NINIO;
END;
/

-- Procedimiento para eliminar en NINIO
CREATE OR REPLACE PROCEDURE delete_ninio(
    p_ID_NINIO IN NINIO.ID_NINIO%TYPE
) IS
BEGIN
    DELETE FROM NINIO WHERE ID_NINIO = p_ID_NINIO;
END;
/

-- Procedimiento para seleccionar en NINIO
CREATE OR REPLACE PROCEDURE select_ninio(
    p_ID_NINIO IN NINIO.ID_NINIO%TYPE,
    p_cursor OUT SYS_REFCURSOR
) IS
BEGIN
    OPEN p_cursor FOR
    SELECT 
        ID_NINIO, ID_NACIONALIDAD, ID_GENERO, ID_TALLA_ZAPATO, 
        ID_TALLA_VESTIMENTA, CI_NINIO, NOMBRE_NINIO, APELLIDO_NINIO, 
        NACIMIENTO_DATE, ESTADO_MATRICULA
    FROM NINIO
    WHERE ID_NINIO = p_ID_NINIO;
END;
/

--EJEMPLO DE USO


-- Habilitar el buffer de DBMS_OUTPUT
SET SERVEROUTPUT ON;

-- Llamar al procedimiento almacenado
BEGIN
    insert_ninio(
        p_ID_NACIONALIDAD => 1,
        p_ID_GENERO => 1,
        p_ID_TALLA_ZAPATO => 3,
        p_ID_TALLA_VESTIMENTA => 1,
        p_CI_NINIO => '1301234537',
        p_NOMBRE_NINIO => 'ALEXIS LENIN',
        p_APELLIDO_NINIO => 'CARDENAS GALLEGO',
        p_NACIMIENTO_DATE => '2015-01-06',
        p_ESTADO_MATRICULA => 'FALSE'
    );
END;
/
-- Ejecutar el procedimiento almacenado para actualizar el registro
BEGIN
    update_ninio(
        p_ID_NINIO => 46,
        p_ID_NACIONALIDAD => 2,
        p_ID_GENERO => 2,
        p_ID_TALLA_ZAPATO => 2,
        p_ID_TALLA_VESTIMENTA => 2,
        p_CI_NINIO => '1301234538',
        p_NOMBRE_NINIO => 'XD',
        p_APELLIDO_NINIO => 'ARCE',
        p_NACIMIENTO_DATE => '2016-02-07',
        p_ESTADO_MATRICULA => 'TRUE'
    );
END;
/
-- Ejecutar el procedimiento almacenado para eliminar el registro
BEGIN
    delete_ninio(p_ID_NINIO => 46);
END;
/

-- Habilitar el buffer de DBMS_OUTPUT
SET SERVEROUTPUT ON;

-- Declarar una variable cursor
VARIABLE rc REFCURSOR;

-- Declarar una variable para el ID_NINIO
VARIABLE p_ID_NINIO NUMBER;

-- Asignar un valor a la variable p_ID_NINIO
BEGIN
    :p_ID_NINIO := 1; -- Cambia este valor al ID_NINIO que deseas consultar
END;
/

-- Ejecutar el procedimiento almacenado
BEGIN
    select_ninio(:p_ID_NINIO, :rc);
END;
/

-- Recuperar y mostrar los resultados
PRINT rc;